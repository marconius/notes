==============================================
INF3105 - Structures de données et algorithmes
==============================================

---------
Intro C++
---------


Survol
======

C++ est un langage compilé en code machine, déclaratif, fortement typé, `procedural`, `générique`.

Syntax (bon header?)
------

Le langage C++ est une augmentation du langage C_ donc le syntax de base est égale à C: exemples

::

    #include<module.h>
    ...
    void main() {
        int a;
        ...
        return a;
    }

Entêtes (interfaces) dans fichiers .h ou .hcc et implementation dans .cc ou .cpp ... GCC et le compliateur utilisé dans le cours.

Tableaux, pointeurs et réferences
---------------------------------

Comme dans le langage C.

Passage de paramêtres
---------------------

Par défaut les paramêtres sont passés aux fonctions par 

E/S
---

* std::cin : Le flux d'entrée standard (stdin)
* std::cout : Le flux de sortie standard (stdout)
* std::cerr : Le flux de sortie d'erreur (stderr)
* operateurs E/S >> et << retournent des &std::istream ou &std::ostream

Mémoire
-------

* Pile (stack) : mémoire alloué (par le compilateur) pour le fonctionnement du programme.
* Tas (heap) : mémoire utilisé pour l'allocation dynamique.

NB: pour le cours on suppose que l'allocation de mémoire coût O(1).
  
Classes
-------

`Classes Java`_ sont inspirées de C++, donc concepts de classes similaires. Les aspects importants des classes en C++:

* constructeurs et destructeurs (pour implementer ``new`` et ``delete``)
* surchargement des fonctions
  
Il existe aussi des classes générique qui 

const 
-----

C'est bon! Aide à éviter des erreurs car une variable const est bloquée à la compilation. Pour une méthode d'instance on peut mettre le ``const`` à deux palces:

::

    int NomClasse::f(const Type& ref) const { ... }
  
Juste avant les accolades d'une fonction membre, `const` spécifie que la fonction peut être appelé dès des instances `const`.

Opérateurs
----------

Les opérateurs peuvent être surchargés. ex:

::

      Element NomClasse::operator[](int i) {
        return tableau[i];
      }

NB: ``friend`` pour fonctions statiques (fonctions de classe) ... nécessaire pour les opérateurs d'E/S

Détails
=======

Caractéristiques et histoire
----------------------------

...

Entrée / Sortie
---------------

...

La difference entre stdout et stderr est ...

::

    std::cout << "Entrez deux numéros" << std::endl;
    int a, b;
    std::cin >> a >> b; // lit les deux nombres dans stdin (séparés par des éspaces)

Pour spécifier un fichier autre que les fichiers spéciaux standards on utilise les streams: std::istream et std::ostream (wrong)

Mémoire
-------

L'**allocation dynamique** sur le tas : ``new`` alloue assez de mémoire pour le type spécifique et retourne l'adresse du nouveau objet. *Ne pas oublier de libérer la mémoire*! ``delete`` désallou un objet existant.
    
Classes
-------

Note: En C++, les classes sont exactement la même chose q'une structure, sauf que les membres d'un struct sont publiques par défaut et pour un classes sont privés.

Constructeur, déstructeur, attributs
````````````````````````````````````

Constructeur ...

On commence avec un objet, Execute les destructeurs des attributs puis le destructeurs de la class supérieur.

::

      // déclaration dans personne.h
      Class Personne {
        public:
          // deux constructeurs
          Personne();
          Personne(std::String nom, int age);
          // le destructeur
          ~Personne();
        private:
          std::String nom;
          int age;
          int* nosTel;
          
        ...
      
      // Définition dans personne.cpp
      Personne::Personne() {
        nom = "Pas D'Nom";
        age = 33;
        nosTel = new int[10];
      }
      
      Personne::Personne(String nom_, int age_)
        : nom(nom_), age(age_) // le `:` ...
      { ... }
      
      Personne::~Personne() {
        delete[] nosTel;

Héritage et fonctions virtuels
``````````````````````````````

Il y a un hierarchie de classes ... les fonctions virtuelles doivent être définies pour concrétiser la classe ...

Le mot clé ``this`` est un pointeur qui point sur l'objet courant. Pour extraire un attribut d'un pointeur on utilise la flêche ``->`` comme dans C. (Si on joue avec objet utilise le ``.``.

::

      ...
      NomClasse::copieAttr() {
        NomClasse autre = new NomClasse();
        autre.attribut = this-­­­­­>attribut;
      }

Classes génériques
``````````````````

...

pourquoi définir des operateurs const et pas const ... ...


Exercices
---------

Exercise vu en classe 1 :

::

  int main() {
    int n; 
    cin >> n;
    int tab[n];
    
    for(int i=0; i<n; ++i) { ... }
    ... //>

Pas bon parce que le compilateur  ...


---------------------
Structures de données
---------------------


Listes
======

Survol
------

Les tableau natifs à C++ sont de taille fixe. Pour On implemente la liste avec les tableaux natifs, mais on à besoin d'allocation de mémoire automatique et dynamique sur le heap: la liste doit croitre avec l'ajout d'éléments. Encapsulation! On veut cacher les fonctions d'augmentation du tableau.

Détails
-------

Implémentation
``````````````

On crée un classe `Tableau` générique (tableau d'éléments de n'importe quel type: le type `T`) qui:

1. est basée sur un tableau natif. Donc les membres de cette classe sont: T* elements, int capacitéInitiale, int taille 
2. offre une interface public pour l'utilisateur: void ajouter(T), int nbElements():
    * capacité grandisse quand nécessaire, donc comment implementer ajouter()?
        * méthode naïve: si `elements` et pleine: copier dans une nouvelle tableau de grandeur taille + 1 (complexité temps O(n^2)).
        * méthode meilleure: si `elements` et pleine: copier dans une nouvelle tableau qui est 2 ou 1,5 fois plus grande (O(2n-1)).

::

    //class TableauDunTypeSpécifique {
    template<class T> class Tableau {
      public: // l'interface publique

      private:
        <T>* elements; // T peut être n'importe quel type.
        int capacitéInitiale;
        int nbElements;

      public:
        // les constructeurs et déstructeurs (compris constructeur copie)
        ...
        ...
        void ajouter(const T);
        // les opérateurs qui marchent quand paramêtres et const et non-const 
        T& operator[](int i);
        const T& operator[](int i) const;
        Tableau<T>& operator = (const Tableau<T>& autre); 
        // Nécessaire de surchargé op = si non ça copie un pointeur au elements 
        // au lieu de données au complet
    

